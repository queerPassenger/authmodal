{"version":3,"sources":["utils.js","header.js","dataGrid.js","pageSearch.js","readme.js","mock.js","search.js","App.js","home.js","reportWebVitals.js","index.js"],"names":["navigate","url","window","location","href","exportCSVFile","headers","items","fileTitle","unshift","csv","objArray","array","JSON","parse","str","i","length","line","index","convertToCSV","stringify","exportedFilenmae","blob","Blob","type","navigator","msSaveBlob","link","document","createElement","undefined","download","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","Header","props","className","onClick","src","alt","auth","fetch","then","resp","a","status","json","data","alert","msg","catch","err","user","username","DataGrid","rows","columns","gridContainerRef","useRef","gridHeaderRef","gridBodyRef","useState","cellWidth","cellHeight","gridWidth","gridHeight","scrollbarWidth","dimensions","updateDimensions","rowWidth","useEffect","current","offsetWidth","offsetHeight","_dimensions","Math","floor","outer","overflow","msOverflowStyle","inner","parentNode","getScrollbarWidth","onGridBodyScroll","e","target","scrollLeft","scroll","left","gridHeader","useMemo","ref","top","width","height","map","x","ind","gridBody","onScroll","rowInd","xx","cellInd","PageSearch","pageSearchInput","prevText","dehighlight","selectedText","text","trim","getElementById","innerHTML","replace","RegExp","onSearch","highlight","value","autoFocus","onKeyDown","keyCode","Readme","uniqueValues","Array","first","second","last","push","TypeAhead","forwardRef","showSuggestions","updateShowSuggestions","updateValue","selectedInd","updatedSelectedInd","scrollIntoView","reset","dropDownList","list","filter","indexOf","onChange","_value","onBlur","setTimeout","placeholder","column","item","id","Search","updateSearchParams","inputsRef","createRef","searchParam","Home","emailId","userInfo","updateUserInfo","filteredRows","updateFilteredRows","searchParams","enablePageSearch","updateEnablePageSearch","onAuthFailure","console","log","count","param","Object","keys","handleSearch","shiftKey","addEventListener","removeEventListener","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App"],"mappings":"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","file":"static/js/main.aca42c28.chunk.js","sourcesContent":["export const navigate = (url) => {\n    if(url) {\n        window.location.href = url;\n    }\n}\nconst convertToCSV = (objArray) => {\n    var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\n    var str = '';\n\n    for (var i = 0; i < array.length; i++) {\n        var line = '';\n        for (var index in array[i]) {\n            if (line != '') line += ','\n\n            line += array[i][index];\n        }\n\n        str += line + '\\r\\n';\n    }\n\n    return str;\n}\n\nexport const  exportCSVFile = (headers, items, fileTitle) => {\n    if (headers) {\n        items.unshift(headers);\n    }\n\n    // Convert Object to JSON\n    var jsonObject = JSON.stringify(items);\n\n    var csv = convertToCSV(jsonObject);\n\n    var exportedFilenmae = fileTitle + '.csv' || 'export.csv';\n\n    var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    if (navigator.msSaveBlob) { // IE 10+\n        navigator.msSaveBlob(blob, exportedFilenmae);\n    } else {\n        var link = document.createElement(\"a\");\n        if (link.download !== undefined) { // feature detection\n            // Browsers that support HTML5 download attribute\n            var url = URL.createObjectURL(blob);\n            link.setAttribute(\"href\", url);\n            link.setAttribute(\"download\", exportedFilenmae);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}","import React from 'react';\nimport { navigate } from './utils';\n\nconst Header = (props) => {\n    const onLogout = () => {\n        fetch('/logout')\n        .then(async (resp) => {\n            if(resp.status === 200) \n                navigate('/signin');\n            else {\n                try {\n                    const data = await resp.json();\n                    alert(data.msg? data.msg: 'Something went wrong');\n                }\n                catch(err) {\n                    alert('Something went wrong');\n                }\n            }\n        })\n        .catch(err => {\n            alert('Something went wrong');\n        })\n    }\n    const logoImg = 'https://avatars2.githubusercontent.com/u/29197735?s=400&u=ef6c2f39d34e624bd215f5f4afc5d35ae385db9c&v=4';\n    return (\n        <header>\n            <div className='header-container'>\n                <div className='logo' onClick={() => { }}>\n                    <img src={logoImg} alt='logo'></img>          \n                    <div className='logo-txt'>\n                        <div>QueerPassenger</div>\n                        <div>initiative</div>\n                    </div>                                 \n                </div>\n                {props.auth && \n                    <div className='right-menu'>\n                        <div className='logout'>\n                            <div onClick={onLogout}>Logout</div>\n                        </div>\n                        <div className='user'>\n                            {props.user.username}\n                        </div>\n                    </div>\n                }\n            </div>\n        </header>\n    )\n}\nexport default Header;","import React, { useRef, useState, useEffect, useMemo } from \"react\";\n\nconst DataGrid = ({\n    rows, columns\n}) => {\n    const gridContainerRef = useRef();\n    const gridHeaderRef = useRef();\n    const gridBodyRef = useRef();\n    const [dimensions, updateDimensions] = useState({\n        cellWidth: 100,\n        cellHeight: 50,\n        gridWidth: 0,\n        gridHeight: 0,\n        scrollbarWidth: 0\n    });\n    const rowWidth = dimensions.cellWidth * columns.length;\n    useEffect(() => {\n        function getScrollbarWidth() {\n            // Creating invisible container\n            const outer = document.createElement('div');\n            outer.style.visibility = 'hidden';\n            outer.style.overflow = 'scroll'; // forcing scrollbar to appear\n            outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n            document.body.appendChild(outer);\n\n            // Creating inner element and placing it in the container\n            const inner = document.createElement('div');\n            outer.appendChild(inner);\n\n            // Calculating difference between container's full width and the child width\n            const scrollbarWidth = (outer.offsetWidth - inner.offsetWidth);\n\n            // Removing temporary elements from the DOM\n            outer.parentNode.removeChild(outer);\n\n            return scrollbarWidth;\n\n        }\n        const calculateDimensions = function () {\n            const { current: { offsetWidth, offsetHeight } } = gridContainerRef;\n            const _dimensions = { ...dimensions };\n            if (offsetWidth > dimensions.cellWidth * columns.length) {\n                _dimensions.cellWidth = Math.floor(offsetWidth / columns.length);\n            }\n            _dimensions.gridWidth = offsetWidth;\n            _dimensions.gridHeight = offsetHeight;\n            _dimensions.scrollbarWidth = getScrollbarWidth();\n            updateDimensions(_dimensions);\n        }();\n\n    }, []);\n    const onGridBodyScroll = (e) => {\n        const { target: { scrollLeft, offsetWidth } } = e;\n        gridHeaderRef.current.scroll({\n            left: scrollLeft\n        });\n    }\n    const gridHeader = useMemo(() => (\n        <div\n            className='grid-header-view'\n            ref={gridHeaderRef}\n            style={{\n                top: 0,\n                width: dimensions.gridWidth - dimensions.scrollbarWidth,\n                height: dimensions.cellHeight\n            }}\n        >\n            <div\n                className='grid-header-container'\n                style={{\n                    width: rowWidth,\n                    height: dimensions.cellHeight\n                }}\n            >\n                <div className='header-row-container' style={{\n                    height: dimensions.cellHeight,\n                    width: rowWidth\n                }}>\n                    {columns.map((x, ind) => (\n                        <div\n                            className='header-cell'\n                            key={`header-cell-${ind}`}\n                            style={{\n                                width: dimensions.cellWidth,\n                                left: dimensions.cellWidth * ind,\n                                height: dimensions.cellHeight\n                            }}\n                        >{x}</div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    ), [columns, dimensions, rowWidth]);\n    const gridBody = useMemo(() => (\n        <div\n            className='grid-body-view'\n            style={{\n                top: dimensions.cellHeight,\n                width: dimensions.gridWidth,\n                height: dimensions.gridHeight - dimensions.cellHeight\n            }}\n            ref={gridBodyRef}\n            onScroll={onGridBodyScroll}\n        >\n            <div className='grid-body-container' style={{\n                height: dimensions.cellHeight * rows.length,\n                width: rowWidth\n            }}>\n                {rows.map((x, rowInd) => {\n                    return <div\n                        className='body-row-container'\n                        style={{\n                            top: dimensions.cellHeight * rowInd,\n                            height: dimensions.cellHeight,\n                            width: rowWidth\n                        }}\n                        key={`row-${rowInd}`}\n                    >\n                        {columns.map((xx, cellInd) => (\n                            <div\n                                className='body-cell'\n                                style={{\n                                    width: dimensions.cellWidth,\n                                    left: dimensions.cellWidth * cellInd,\n                                    height: dimensions.cellHeight\n                                }}\n                                key={`row-${rowInd}-cell-${cellInd}`}\n                            >{x[xx]}</div>\n                        ))}\n                    </div>\n                })}\n            </div>\n        </div>\n    ), [rows, dimensions, rowWidth]);\n    return (\n        <div className='grid-container' ref={gridContainerRef}>\n            {gridHeader}\n            {gridBody}\n        </div>\n    )\n}\nexport default DataGrid;","import React, { useEffect, useRef } from 'react';\n\nconst PageSearch = () => {\n    const pageSearchInput = useRef();\n    let prevText = '';\n    useEffect(() => {\n        return () => {\n            dehighlight(prevText);\n        }\n    }, []);\n    const dehighlight = (selectedText) => {\n        const text = selectedText.trim();\n        if(text === '')\n            return;\n        document.getElementById('search-area').innerHTML = document.getElementById('search-area').innerHTML.replace(\n            new RegExp( '<mark>' + text + '</mark>', 'g'),\n            text\n        );\n        prevText = '';\n    }\n    const highlight = (selectedText) => {\n        dehighlight(prevText);\n        const text = selectedText.trim();\n            if(text === '')\n                return;        \n        document.getElementById('search-area').innerHTML = document.getElementById('search-area').innerHTML.replace(\n            new RegExp(text, 'g'),\n            '<mark>' + text + '</mark>'\n        );\n        prevText = text;\n    }\n    const onKeyDown = (e) => {\n        if(e.keyCode === 13) {\n            onSearch();\n        }\n    }\n    const onSearch = () => {\n        const { current: { value }} = pageSearchInput;\n        highlight(value);\n    }\n    const onClear = () => {\n        pageSearchInput.current.value = '';\n        dehighlight(prevText);\n    }\n    return (\n        <div className='pageSearch'>\n            <input\n                ref={pageSearchInput} \n                autoFocus={true}\n                onKeyDown={onKeyDown}\n            />\n            <div className='action-text'>\n                <span onClick={onClear}>Clear</span>\n                <span onClick={onSearch}>Search</span>\n            </div>\n        </div>        \n    )\n}\nexport default PageSearch;","import React from 'react';\n\nconst Readme = () => (\n    <div className='readme'>\n        <h2>Introduction</h2>\n        A data grid is displayed below.\n        The data grid you see here is not conventional table formed using the\n        html table tag but build customly using div tags.\n        You can filter the data in the grid using\n        the typeahead search inputs available for each columns.\n        The inputs are typeahead. You can select the values from the list.\n        After selecting the filter text please click on search button and if you\n        want to clear the filter params , please click on Clear button.\n        If you click the search and click button the grid will be filtered.\n        If you need to search the body of the webpage as a whole,\n        you can try pressing \"Shift + F\".\n        On key press \"Shift + F\" you will be able to see a search box at the bottom\n        You can remove the search box from the view using \"Escape\" key press.\n        After entering the search text , try pressing \"Enter\" or click on the search\n        link in the search box.\n        Additionally you have the \"Clear\" link to clear the search text.\n        The highlighted text will appear in Yellow.\n        This search is not a fool proof system. It will not work correctly if your\n        searched text matches with html tag names, attribute name or attribute values.\n        Apart from the edge case you can expect a good performance for most scenarios.\n        If you have any queries, you know where to reach me.\n    </div>\n)\nexport default Readme;","const columns = ['S.no', 'Name', 'Gender', 'Place', 'DOB'];\nlet uniqueValues = [\n    [],//dynamic set \n    [],//dynamic set\n    ['Male', 'Female', 'Trans'],\n    ['Tamil Nadu','Karntaka', 'Madhya Pradesh', 'Andhra Pradesh', 'Kerala', 'Rajasthan'],\n    []//dynamic\n]\nconst rows = [...Array(100)].map((x, ind) => {\n    const first = ind + 1 + '';\n    const second = 'User' + ind;\n    const last = `${ind%30}/${ind%12}/1994`;\n    uniqueValues[0].push(first);\n    uniqueValues[1].push(second);\n    uniqueValues[4].push(last);\n    return {\n        'S.no': first,\n        'Name': second,\n        'Gender': uniqueValues[2][ind%uniqueValues[2].length],\n        'Place': uniqueValues[3][ind%uniqueValues[3].length],\n        'DOB': last\n    }\n});\n\nexport {\n    columns,\n    rows,\n    uniqueValues\n}","import React, { forwardRef, useRef, createRef, useState, useEffect } from 'react';\n\nconst Search = ({\n    columns,\n    uniqueValues,\n    updateSearchParams\n}) => {\n    const inputsRef = useRef(columns.map(() => createRef()));\n    const onSearch = () => {\n        const searchParam = {};\n        inputsRef.current.map((x,ind) => {\n            const value = x.current.value.trim();\n            if(value !== ''){\n                searchParam[columns[ind]] = value;\n            }\n        });\n        updateSearchParams(searchParam);\n    }\n    const onClear = () => {\n        inputsRef.current.map(x => x.current.value = '');\n        updateSearchParams({});\n    }\n    return (\n        <div className='search'>\n            <h2>Search</h2>\n            <div className='search-container'>\n                {columns.map((x, ind) => {\n                    return (\n                        <TypeAhead\n                            key= {'typeAhead' + ind}\n                            ref={inputsRef.current[ind]}\n                            column={x}\n                            list={uniqueValues[ind]}\n                        />\n                    )\n                })}\n            </div>\n            <div className='action-container'>\n                <button onClick={onSearch}>Search</button>\n                <button onClick={onClear}>Clear</button>\n            </div>\n        </div>\n    )\n}\nconst TypeAhead = forwardRef((props, ref) => {\n    const [showSuggestions, updateShowSuggestions] = useState(false);\n    const [value, updateValue] = useState('');\n    const [selectedInd, updatedSelectedInd] = useState(-1);\n    useEffect(() => {\n        if(selectedInd >= 0) \n            document.getElementById('drop-down-item' + selectedInd) && document.getElementById('drop-down-item' + selectedInd).scrollIntoView(false);\n        \n    }, [selectedInd]);\n    const reset = () => {\n        updateValue('');\n        updateShowSuggestions(false);\n        updatedSelectedInd(-1);    \n    }\n    const dropDownList = showSuggestions && value !== ''? props.list.filter(x => x.indexOf(value)!== -1): [];\n    //const dropDownList = props.list;\n    return (\n        <div\n            className='search-input-container'\n        >\n            <div className='search-input'>\n                <input\n                    ref={ref}\n                    onChange={(e) => {\n                        const { target: { value: _value }} = e;\n                        updateValue(_value);\n                        updateShowSuggestions(true);\n                        updatedSelectedInd(-1);\n                    }}\n                    onKeyDown={(e) => {\n                        if(e.keyCode === 38) {\n                            if(selectedInd - 1 >= 0) \n                                updatedSelectedInd(selectedInd - 1);\n                        }\n                        if(e.keyCode === 40) {\n                            if(selectedInd + 1 <= dropDownList.length - 1) \n                                updatedSelectedInd(selectedInd + 1);\n                        }\n                        if(e.keyCode === 13) {\n                            ref.current.value = dropDownList[selectedInd];\n                            reset();\n                        }\n                    }}\n                    onBlur={() => setTimeout(reset, 500)}\n                    placeholder={`Search for ${props.column}`}\n                ></input>\n                {dropDownList &&\n                    <div className='drop-down-container'>\n                        {dropDownList.map((item, ind) => {\n                            return (\n                                <div\n                                    key={'item' + ind}\n                                    id={'drop-down-item' + ind}\n                                    className={`${ind === selectedInd ? 'selected': ''} `}                                    \n                                    onClick={() => {\n                                        ref.current.value = item;\n                                        reset();\n                                    }}\n                                >\n                                    {item}\n                                </div>\n                            )\n                        })}\n                    </div>\n                }\n                </div>            \n        </div>\n    )    \n});\nexport default Search;","// SIGNIN BUILD\n// import Signin from './signin';\n// export default Signin;\n\n//SIGNUP BUILD\n// import Signup from './signup';\n// export default Signup;\n\n//HOME BUILD\nimport Home from './home';\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport Header from './header';\nimport { navigate, exportCSVFile } from './utils';\nimport DataGrid from './dataGrid';\nimport PageSearch from './pageSearch';\nimport Readme from './readme';\nimport { rows, columns, uniqueValues } from './mock';\nimport Search from './search';\n\nconst Home = () => {\n    const [userInfo, updateUserInfo] = useState({\n        username: '',\n        emailId: ''\n    });\n    const [filteredRows, updateFilteredRows] = useState([]);\n    const [searchParams, updateSearchParams] = useState({});\n    const [enablePageSearch, updateEnablePageSearch] = useState(false);\n    useEffect(() => {\n        fetch('/userinfo')\n        .then(async (resp) => {\n            try {\n                const data = await resp.json();\n                if(resp.status === 200) \n                    updateUserInfo(data);\n                \n                else \n                    onAuthFailure(data.msg);\n            }\n            catch(err) {\n                onAuthFailure();\n            }\n            \n        })\n        .catch((err) => {\n            onAuthFailure()\n            console.log('Error', err);\n        })\n    }, []);\n    useEffect(() => {\n        updateFilteredRows(            \n            rows.filter(x => {\n                let count = 0;\n                for(let param in searchParams) {\n                    if(x[param].indexOf(searchParams[param]) !== -1)\n                        count ++;                    \n                    else\n                        break;\n                }\n                if(count === Object.keys(searchParams).length)\n                    return true;\n                else\n                    return false;\n            })\n        );\n    }, [searchParams]);\n    const onAuthFailure = (msg = 'Something went wrong') => {\n        alert(msg);\n        navigate('/signin');\n    }\n    useEffect(() => {\n        const handleSearch = (e) => {\n            if(e.shiftKey && e.keyCode === 70) \n                return setTimeout(() => updateEnablePageSearch(true) , 250);\n            if(e.keyCode === 27)\n                return updateEnablePageSearch(false);            \n        }\n        window.addEventListener('keydown', handleSearch);\n        return () => window.removeEventListener('keydown', handleSearch);\n    }, []);\n    return (\n        <div>\n            <Header \n                auth={true}\n                user={userInfo}\n            />            \n            <div id='search-area'>\n                <Readme />\n                <Search \n                    columns={columns}\n                    uniqueValues={uniqueValues}\n                    updateSearchParams={(params) => updateSearchParams(params)}\n                />\n                <div className='export'>\n                    <span onClick={() => exportCSVFile(columns, filteredRows, 'Export')}>Export</span>\n                </div>\n                <DataGrid\n                    rows={filteredRows}\n                    columns={columns}\n                />\n                <div className='grid-count'>\n                    <div>{`Filtered Data Count: ${filteredRows.length}`}</div>\n                    <div>{`Total Data Count     : ${rows.length}`}</div>\n                </div>\n            </div>            \n            <div className='footer'>\n                {enablePageSearch && <PageSearch />}\n            </div>\n        </div>\n    )\n}\nexport default Home;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}