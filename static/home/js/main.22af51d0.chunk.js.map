{"version":3,"sources":["header.js","utils.js","dataGrid.js","home.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","onClick","src","alt","auth","fetch","then","resp","a","status","url","window","location","href","json","data","alert","msg","catch","err","user","username","DataGrid","rows","columns","gridContainerRef","useRef","gridHeaderRef","gridBodyRef","useState","cellWidth","cellHeight","gridWidth","gridHeight","scrollbarWidth","dimensions","updateDimensions","rowWidth","length","useEffect","current","offsetWidth","offsetHeight","_dimensions","Math","floor","outer","document","createElement","style","visibility","overflow","msOverflowStyle","body","appendChild","inner","parentNode","removeChild","getScrollbarWidth","onGridBodyScroll","e","target","scrollLeft","scroll","left","gridHeader","useMemo","ref","top","width","height","map","x","ind","gridBody","onScroll","rowInd","xx","cellInd","Array","Home","emailId","userInfo","updateUserInfo","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","getElementById"],"mappings":"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","file":"static/js/main.22af51d0.chunk.js","sourcesContent":["import React from 'react';\nimport { navigate } from './utils';\n\nconst Header = (props) => {\n    const onLogout = () => {\n        fetch('/logout')\n        .then(async (resp) => {\n            if(resp.status === 200) \n                navigate('/signin');\n            else {\n                try {\n                    const data = await resp.json();\n                    alert(data.msg? data.msg: 'Something went wrong');\n                }\n                catch(err) {\n                    alert('Something went wrong');\n                }\n            }\n        })\n        .catch(err => {\n            alert('Something went wrong');\n        })\n    }\n    const logoImg = 'https://avatars2.githubusercontent.com/u/29197735?s=400&u=ef6c2f39d34e624bd215f5f4afc5d35ae385db9c&v=4';\n    return (\n        <header>\n            <div className='header-container'>\n                <div className='logo' onClick={() => { }}>\n                    <img src={logoImg} alt='logo'></img>          \n                    <div className='logo-txt'>\n                        <div>QueerPassenger</div>\n                        <div>initiative</div>\n                    </div>                                 \n                </div>\n                {props.auth && \n                    <div className='right-menu'>\n                        <div className='logout'>\n                            <div onClick={onLogout}>Logout</div>\n                        </div>\n                        <div className='user'>\n                            {props.user.username}\n                        </div>\n                    </div>\n                }\n            </div>\n        </header>\n    )\n}\nexport default Header;","export const navigate = (url) => {\n    if(url) {\n        window.location.href = url;\n    }\n}","import React, { useRef, useState, useEffect, useMemo } from \"react\";\n\nconst DataGrid = ({\n    rows, columns\n}) => {\n    const gridContainerRef = useRef();\n    const gridHeaderRef = useRef();\n    const gridBodyRef = useRef();\n    const [dimensions, updateDimensions] = useState({\n        cellWidth: 100,\n        cellHeight: 50,\n        gridWidth: 0,\n        gridHeight: 0,\n        scrollbarWidth: 0\n    });\n    const rowWidth = dimensions.cellWidth * columns.length;\n    useEffect(() => {\n        function getScrollbarWidth() {\n            // Creating invisible container\n            const outer = document.createElement('div');\n            outer.style.visibility = 'hidden';\n            outer.style.overflow = 'scroll'; // forcing scrollbar to appear\n            outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n            document.body.appendChild(outer);\n\n            // Creating inner element and placing it in the container\n            const inner = document.createElement('div');\n            outer.appendChild(inner);\n\n            // Calculating difference between container's full width and the child width\n            const scrollbarWidth = (outer.offsetWidth - inner.offsetWidth);\n\n            // Removing temporary elements from the DOM\n            outer.parentNode.removeChild(outer);\n\n            return scrollbarWidth;\n\n        }\n        const calculateDimensions = function () {\n            const { current: { offsetWidth, offsetHeight } } = gridContainerRef;\n            const _dimensions = { ...dimensions };\n            if (offsetWidth > dimensions.cellWidth * columns.length) {\n                _dimensions.cellWidth = Math.floor(offsetWidth / columns.length);\n            }\n            _dimensions.gridWidth = offsetWidth;\n            _dimensions.gridHeight = offsetHeight;\n            _dimensions.scrollbarWidth = getScrollbarWidth();\n            updateDimensions(_dimensions);\n        }();\n\n    }, []);\n    const onGridBodyScroll = (e) => {\n        const { target: { scrollLeft, offsetWidth } } = e;\n        gridHeaderRef.current.scroll({\n            left: scrollLeft\n        });\n    }\n    const gridHeader = useMemo(() => (\n        <div\n            className='grid-header-view'\n            ref={gridHeaderRef}\n            style={{\n                top: 0,\n                width: dimensions.gridWidth - dimensions.scrollbarWidth,\n                height: dimensions.cellHeight\n            }}\n        >\n            <div\n                className='grid-header-container'\n                style={{\n                    width: rowWidth,\n                    height: dimensions.cellHeight\n                }}\n            >\n                <div className='header-row-container' style={{\n                    height: dimensions.cellHeight,\n                    width: rowWidth\n                }}>\n                    {columns.map((x, ind) => (\n                        <div\n                            className='header-cell'\n                            key={`header-cell-${ind}`}\n                            style={{\n                                width: dimensions.cellWidth,\n                                left: dimensions.cellWidth * ind,\n                                height: dimensions.cellHeight\n                            }}\n                        >{x}</div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    ), [columns, dimensions, rowWidth]);\n    const gridBody = useMemo(() => (\n        <div\n            className='grid-body-view'\n            style={{\n                top: dimensions.cellHeight,\n                width: dimensions.gridWidth,\n                height: dimensions.gridHeight - dimensions.cellHeight\n            }}\n            ref={gridBodyRef}\n            onScroll={onGridBodyScroll}\n        >\n            <div className='grid-body-container' style={{\n                height: dimensions.cellHeight * rows.length,\n                width: rowWidth\n            }}>\n                {rows.map((x, rowInd) => {\n                    return <div\n                        className='body-row-container'\n                        style={{\n                            top: dimensions.cellHeight * rowInd,\n                            height: dimensions.cellHeight,\n                            width: rowWidth\n                        }}\n                        key={`row-${rowInd}`}\n                    >\n                        {columns.map((xx, cellInd) => (\n                            <div\n                                className='body-cell'\n                                style={{\n                                    width: dimensions.cellWidth,\n                                    left: dimensions.cellWidth * cellInd,\n                                    height: dimensions.cellHeight\n                                }}\n                                key={`row-${rowInd}-cell-${cellInd}`}\n                            >{x[xx]}</div>\n                        ))}\n                    </div>\n                })}\n            </div>\n        </div>\n    ), [rows, dimensions, rowWidth]);\n    return (\n        <div className='grid-container' ref={gridContainerRef}>\n            {gridHeader}\n            {gridBody}\n        </div>\n    )\n}\nexport default DataGrid;","import React, { useState, useEffect } from 'react';\nimport Header from './header';\nimport { navigate } from './utils';\nimport DataGrid from './dataGrid';\n\nconst columns = ['S.no', 'Name', 'Gender', 'Place', 'DOB'];\nconst rows = [...Array(100)].map((x, ind) => ({\n    'S.no': ind + 1 + '',\n    'Name': 'User' + ind,\n    'Gender': ['Male', 'Female'][ind%2],\n    'Place': ['TN','KA', 'MADYA', 'ANDRA'][ind%3],\n    'DOB': `${ind%30}/${ind%12}/1994`\n}));\n\nconst Home = () => {\n    const [userInfo, updateUserInfo] = useState({\n        username: '',\n        emailId: ''\n    })\n    useEffect(() => {\n        fetch('/userinfo')\n        .then(async (resp) => {\n            try {\n                const data = await resp.json();\n                if(resp.status === 200) \n                    updateUserInfo(data);\n                \n                else {                \n                    alert(data.msg? data.msg: 'Something went wrong');\n                    //navigate('/signin');\n                }\n            }\n            catch(err) {\n                alert('Something went wrong');\n                //navigate('/signin');\n            }\n            \n        })\n        .catch((err) => {\n            alert('Something went wrong');\n            //navigate('/signin');\n            console.log('Error', err);\n        })\n    }, []);\n    return (\n        <div>\n            <Header \n                auth={true}\n                user={userInfo}\n            />\n            <DataGrid\n                rows={rows}\n                columns={columns}\n            />\n        </div>\n    )\n}\nexport default Home;","// SIGNIN BUILD\n// import Signin from './signin';\n// export default Signin;\n\n//SIGNUP BUILD\n// import Signup from './signup';\n// export default Signup;\n\n//HOME BUILD\nimport Home from './home';\nexport default Home;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}